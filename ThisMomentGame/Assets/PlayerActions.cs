//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""81243829-2de9-44b6-a11a-0a1db4d56639"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7ab04eab-f8ec-4386-81e9-8f4fd32975f8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Connect"",
                    ""type"": ""Button"",
                    ""id"": ""f16976f3-4a21-488d-90ac-7dd8d2f9d36f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0aafa8ca-3b13-4d5c-bd31-f8c94c92b053"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f1d25e9a-6615-49d2-9379-cab5cc83db63"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""246ec377-2597-4643-9760-fdc3ad8e2955"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1b7cf651-2337-4871-b417-77f121549d3d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""905de698-ff1e-4930-890c-c2766ca84403"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8bc46ea7-723a-4fd9-ac8a-2ed0a13e9372"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""51b50b6c-4ec4-459e-8be3-c6a97e38ef45"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Connect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Emotes"",
            ""id"": ""790e980a-6fdc-49c0-8450-a4b0e89f2179"",
            ""actions"": [
                {
                    ""name"": ""Red"",
                    ""type"": ""Value"",
                    ""id"": ""1143d927-b27c-473a-a303-012f096b1b5a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Green"",
                    ""type"": ""Value"",
                    ""id"": ""83836743-47f7-43e7-9e80-1784c315438e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Blue"",
                    ""type"": ""Value"",
                    ""id"": ""6cbbdb0b-2ccc-4aff-9f95-d299bd51c8ff"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Yellow"",
                    ""type"": ""Value"",
                    ""id"": ""0d63a24e-c882-4dc4-a342-95b99a76f189"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3ac3a8a1-2b9e-4815-9b10-913e704927bc"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Red"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""868408ba-b6cb-4e87-a10e-3c650fa7cd7b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Green"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb92dfc4-e8d6-40b6-9dc0-a4284c5f447a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Blue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7f9998a-1a3d-420a-bf62-8d93edfce5d4"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yellow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_Move = m_PlayerMovement.FindAction("Move", throwIfNotFound: true);
        m_PlayerMovement_Connect = m_PlayerMovement.FindAction("Connect", throwIfNotFound: true);
        // Emotes
        m_Emotes = asset.FindActionMap("Emotes", throwIfNotFound: true);
        m_Emotes_Red = m_Emotes.FindAction("Red", throwIfNotFound: true);
        m_Emotes_Green = m_Emotes.FindAction("Green", throwIfNotFound: true);
        m_Emotes_Blue = m_Emotes.FindAction("Blue", throwIfNotFound: true);
        m_Emotes_Yellow = m_Emotes.FindAction("Yellow", throwIfNotFound: true);
    }

    ~@PlayerActions()
    {
        UnityEngine.Debug.Assert(!m_PlayerMovement.enabled, "This will cause a leak and performance issues, PlayerActions.PlayerMovement.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Emotes.enabled, "This will cause a leak and performance issues, PlayerActions.Emotes.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_Move;
    private readonly InputAction m_PlayerMovement_Connect;
    public struct PlayerMovementActions
    {
        private @PlayerActions m_Wrapper;
        public PlayerMovementActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerMovement_Move;
        public InputAction @Connect => m_Wrapper.m_PlayerMovement_Connect;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Connect.started += instance.OnConnect;
            @Connect.performed += instance.OnConnect;
            @Connect.canceled += instance.OnConnect;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Connect.started -= instance.OnConnect;
            @Connect.performed -= instance.OnConnect;
            @Connect.canceled -= instance.OnConnect;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // Emotes
    private readonly InputActionMap m_Emotes;
    private List<IEmotesActions> m_EmotesActionsCallbackInterfaces = new List<IEmotesActions>();
    private readonly InputAction m_Emotes_Red;
    private readonly InputAction m_Emotes_Green;
    private readonly InputAction m_Emotes_Blue;
    private readonly InputAction m_Emotes_Yellow;
    public struct EmotesActions
    {
        private @PlayerActions m_Wrapper;
        public EmotesActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Red => m_Wrapper.m_Emotes_Red;
        public InputAction @Green => m_Wrapper.m_Emotes_Green;
        public InputAction @Blue => m_Wrapper.m_Emotes_Blue;
        public InputAction @Yellow => m_Wrapper.m_Emotes_Yellow;
        public InputActionMap Get() { return m_Wrapper.m_Emotes; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EmotesActions set) { return set.Get(); }
        public void AddCallbacks(IEmotesActions instance)
        {
            if (instance == null || m_Wrapper.m_EmotesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EmotesActionsCallbackInterfaces.Add(instance);
            @Red.started += instance.OnRed;
            @Red.performed += instance.OnRed;
            @Red.canceled += instance.OnRed;
            @Green.started += instance.OnGreen;
            @Green.performed += instance.OnGreen;
            @Green.canceled += instance.OnGreen;
            @Blue.started += instance.OnBlue;
            @Blue.performed += instance.OnBlue;
            @Blue.canceled += instance.OnBlue;
            @Yellow.started += instance.OnYellow;
            @Yellow.performed += instance.OnYellow;
            @Yellow.canceled += instance.OnYellow;
        }

        private void UnregisterCallbacks(IEmotesActions instance)
        {
            @Red.started -= instance.OnRed;
            @Red.performed -= instance.OnRed;
            @Red.canceled -= instance.OnRed;
            @Green.started -= instance.OnGreen;
            @Green.performed -= instance.OnGreen;
            @Green.canceled -= instance.OnGreen;
            @Blue.started -= instance.OnBlue;
            @Blue.performed -= instance.OnBlue;
            @Blue.canceled -= instance.OnBlue;
            @Yellow.started -= instance.OnYellow;
            @Yellow.performed -= instance.OnYellow;
            @Yellow.canceled -= instance.OnYellow;
        }

        public void RemoveCallbacks(IEmotesActions instance)
        {
            if (m_Wrapper.m_EmotesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEmotesActions instance)
        {
            foreach (var item in m_Wrapper.m_EmotesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EmotesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EmotesActions @Emotes => new EmotesActions(this);
    public interface IPlayerMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnConnect(InputAction.CallbackContext context);
    }
    public interface IEmotesActions
    {
        void OnRed(InputAction.CallbackContext context);
        void OnGreen(InputAction.CallbackContext context);
        void OnBlue(InputAction.CallbackContext context);
        void OnYellow(InputAction.CallbackContext context);
    }
}
